import React, { createContext, useContext, useState, useEffect } from "react"; import axios from "axios"; interface User { _id: string; email: string; firstName: string; lastName: string; company: string; } interface AuthContextType { user: User | null; token: string | null; login: (email: string, password: string) => Promise<void>; register: (userData: any) => Promise<void>; logout: () => void; } const AuthContext = createContext<AuthContextType | undefined>(undefined); export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => { const [user, setUser] = useState<User | null>(null); const [token, setToken] = useState<string | null>(null); useEffect(() => { const storedToken = localStorage.getItem("token"); if (storedToken) { setToken(storedToken); axios.defaults.headers.common["Authorization"] = `Bearer ${storedToken}`; } }, []); const login = async (email: string, password: string) => { const response = await axios.post("/api/auth/login", { email, password }); const { user, token } = response.data; setUser(user); setToken(token); localStorage.setItem("token", token); axios.defaults.headers.common["Authorization"] = `Bearer ${token}`; }; const register = async (userData: any) => { const response = await axios.post("/api/auth/register", userData); const { user, token } = response.data; setUser(user); setToken(token); localStorage.setItem("token", token); axios.defaults.headers.common["Authorization"] = `Bearer ${token}`; }; const logout = () => { setUser(null); setToken(null); localStorage.removeItem("token"); delete axios.defaults.headers.common["Authorization"]; }; return ( <AuthContext.Provider value={{ user, token, login, register, logout }}> {children} </AuthContext.Provider> ); }; export const useAuth = () => { const context = useContext(AuthContext); if (context === undefined) { throw new Error("useAuth must be used within an AuthProvider"); } return context; };
