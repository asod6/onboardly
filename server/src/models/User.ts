import mongoose, { Schema } from "mongoose"; import bcrypt from "bcryptjs"; export interface IUser extends mongoose.Document { email: string; password: string; firstName: string; lastName: string; company: string; comparePassword(candidatePassword: string): Promise<boolean>; } const userSchema = new Schema({ email: { type: String, required: true, unique: true, trim: true, lowercase: true }, password: { type: String, required: true, minlength: 6 }, firstName: { type: String, required: true, trim: true }, lastName: { type: String, required: true, trim: true }, company: { type: String, required: true, trim: true } }); userSchema.pre("save", async function(next) { const user = this as IUser; if (user.isModified("password")) { user.password = await bcrypt.hash(user.password, 8); } next(); }); userSchema.methods.comparePassword = async function(candidatePassword: string): Promise<boolean> { return bcrypt.compare(candidatePassword, this.password); }; export const User = mongoose.model<IUser>("User", userSchema);
